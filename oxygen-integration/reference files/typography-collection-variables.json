[
	{"id":"66f9e61e-5a64-4de9-a197-8df59a967cb5","type":"unit","label":"Font Size XXXL","cssVariableName":"font-size-xxxl","collection":"Typography Collection","value":{"number":"--mico-fs-xxxl","unit":"custom","style":"--mico-fs-xxxl"}},
	{"id":"97c5b002-caa9-45f5-9840-bc8ba76c6dc0","type":"unit","label":"Font Size XXL","cssVariableName":"font-size-xxl","collection":"Typography Collection","value":{"number":"--mico-fs-xxl","unit":"custom","style":"--mico-fs-xxl"}},
	{"id":"e9fea243-e66c-4660-9930-858b78e45710","type":"unit","label":"Font Size XL","cssVariableName":"font-size-xl","collection":"Typography Collection","value":{"number":"--mico-fs-xl","unit":"custom","style":"--mico-fs-xl"}}
]

// Read through the attached master json file containing an example of all the groups of variables collections that I exported from oxygen builder. Also look at the individual json file of a partculary collection group/section of variables, that I exported alone but is included in the master json I mentioned. After that, I want you to carefully analyze how it created and structure because I want you to help me convert/generate all of my CSS frameworks custom properties AKA variables (in variables.css) into the same JSON format like structure like the ones I exported from oxygen so that I can upload or import my own frameworks variable without any issues. 

// You are going to give me an effective and reusable Javascript script or scripts (with any other addition language like regex or ajax or others if/that are neccessary. No npm crap or whatsover) that will help do all that dynamically and intelligently. I should be able to run the script like "node run script-name.js" in order to generate the json file dynamically and intelligently with no issues at all. I want to be able to drop this script's folder into my exisiting directory where the css framework is being built and just configure the path of where it will get the mico.min.css file and where it should output the generated json file. The script should be well written, be maintainble for future use and understand and it should work very well.

// Here are some things I need you to take into account:
// 1. You should generate a single JSON file of my framework contain all the variables in my variable.css but formated like the master json file with groups of individual collections inside.
// 2. There are only three types of "type" for each variable namely "color", "unit" and "image_url", separate all the color variables from the rest and give them the type of "color" followed with their appropriate properties (or the format and properties that oxygen builder gives the variable according to their type) and give the rest of the variables the type of "unit" followed with their appropriate properties (or the format and properties that oxygen builder gives the variable according to their type) except for variable responsible for the image placeholder urls (--mico-img-placeholder-xxxxx), also followed with their appropriate properties (or the format and properties that oxygen builder gives the variable according to their type).
// 3. Prefix the/each "id" with "mico".

// Remember you are only getting the variable names of the frameworks in in variables.css and grouping them in their respective collections e.g, the variable names only that look like or are prefixed with "--mico-" and not their values. Also be careful not to get variables that are values of other values are this will cause duplications of variables. For example --mico-get-this-variable-name: var(--mico-and-not-this-variable-name). In short avoid getting variable names that are values and are inside a "var()". I am sure you get the gist now. 